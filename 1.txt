public class ChangeField
{
    public string Name { get; set; }
    public string OldValue { get; set; }
    public string Text { get; set; }
}

public class DetailsItem
{
    public string Title { get; set; }
    public string Details { get; set; }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

public class XmlProcessor
{
    public (List<ChangeField> Changes, List<DetailsItem> Details) ParseXml(string xmlData)
    {
        if (string.IsNullOrWhiteSpace(xmlData))
            throw new ArgumentException("XML data is empty or null.");

        try
        {
            var changes = new List<ChangeField>();
            var details = new List<DetailsItem>();

            // Parse the XML data
            var xmlDocument = XDocument.Parse(xmlData);

            // Process the <Change> node and convert to ChangeField objects
            var changeNodes = xmlDocument.Descendants("Change").Elements("Field");
            foreach (var field in changeNodes)
            {
                var changeField = new ChangeField
                {
                    Name = field.Attribute("Name")?.Value,
                    OldValue = field.Attribute("OldValue")?.Value,
                    Text = field.Value
                };
                changes.Add(changeField);
            }

            // Process the <Details> node and convert to DetailsItem objects
            var detailsNodes = xmlDocument.Descendants("Details").Elements("Details");
            foreach (var detail in detailsNodes)
            {
                var detailItem = new DetailsItem
                {
                    Title = detail.Attribute("Title")?.Value,
                    Details = detail.Attribute("Details")?.Value
                };
                details.Add(detailItem);
            }

            return (changes, details);
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Error processing XML: {ex.Message}", ex);
        }
    }
}
